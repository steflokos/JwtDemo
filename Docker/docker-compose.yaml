services:
  # nginx:
  #   container_name: "${COMPOSE_PROJECT_NAME}-Nginx"
  #   build:
  #     context: ./nginx
  #     dockerfile: nginx.Dockerfile
  #   ports:
  #     - "9443:443"
  #     - "9080:80"
  #   volumes:
  #     - ${NGINX_CONF}:/etc/nginx/templates/default.conf.template
  #     - ${PROXY_CONF}:/etc/nginx/proxy.conf;
  #   depends_on:
  #     - spa-server
  #   restart: "unless-stopped"
  #   networks:
  #     backend:
  #       ipv4_address: 192.168.2.10
  spa-server:
    container_name: "${COMPOSE_PROJECT_NAME}-SpaServer.Net"
    build:
      context: ./spa-server
      dockerfile: spa-server.Dockerfile
    ports:
      - "7443:443"
      - "7080:80"
    environment:
      ASPNETCORE_URLS: https://+:443;http://+:80
      ASPNETCORE_HTTPS_PORT: 443
      #ASPNETCORE_URLS: "https://+;http://+"
      ASPNETCORE_ENVIRONMENT: Production
      ASPNETCORE_Kestrel__Certificates__Default__Password: "Cert123"
      ASPNETCORE_Kestrel__Certificates__Default__Path: ../https/aspnetapp.pfx
    restart: "unless-stopped"
    entrypoint: [ "dotnet", "JwtDemo.dll" ]
    volumes:
      - ${ASPNET_PUBLISH_DIR}:/publish
      #- ${HTTPS_CONFIG_DIR}:/publish/https.config
      - ${ASPNET_MIGRATIONS_DIR}:/migrations
    networks:
      backend:
        ipv4_address: 192.168.2.11
    #network_mode: host
  redis:
    container_name: "${COMPOSE_PROJECT_NAME}-Redis"
    build:
      context: ./redis
      dockerfile: redis.Dockerfile
    restart: "unless-stopped"
    volumes:
      - ${REDIS_DATA_DIR}:/data
      - ${REDIS_CONF}:/usr/local/etc/redis/redis.conf
    ports:
      - '6379:6379'
    networks:
      backend:
        ipv4_address: 192.168.2.14
    #network_mode: host
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
  postgresql:
    container_name: "${COMPOSE_PROJECT_NAME}-${DATABASE}"
    build:
      context: ./postgresql
      dockerfile: postgresql.Dockerfile
    restart: "unless-stopped"
    expose:
      - "5432"
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${POSTGRES_ROOT_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ROOT_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: ${PGDATA_DIR}
      POSTGRES_INITDB_WALDIR: ${PGDATA_WALDIR}
    volumes:
      - ${POSTGRESQL_DATA_DIR}:${PGDATA_DIR}
      - ${POSTGRESQL_DATA_WALDIR}:${PGDATA_WALDIR}
      - ${POSTGRESQL_INITDB_DIR}:/docker-entrypoint-initdb.d
    networks:
      backend:
        ipv4_address: 192.168.2.15
    #network_mode: host
  pgadmin:
    container_name: "${COMPOSE_PROJECT_NAME}-PgAdmin"
    build:
      context: ./pgadmin
      dockerfile: pgadmin.Dockerfile
    restart: "unless-stopped"
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: 1
    volumes:
      - ${PGADMIN_DATA_DIR}:/var/lib/pgadmin
    networks:
      backend:
        ipv4_address: 192.168.2.16
    #network_mode: host
networks:
  backend:
    driver: bridge
    ipam:
      config:
        - subnet: "192.168.2.0/16"
          # ip_range: "192.168.1.170/32" #192.168.1.160 - 192.168.1.170
          gateway: "192.168.2.1"
